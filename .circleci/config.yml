version: 2.1
    
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy S3 Buckets
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
      - run:
          name: Destroy Stacks
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Destroy Promotion Stack
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-cloudfront

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
            --request GET https://api.memstash.io/values/migration-${CIRCLE_WORKFLOW_ID})
            echo "************** SUCCESS = $SUCCESS"
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
                
  slack-notify:
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1

jobs:
  install-backend-dependencies:
    docker:
      # Lightweight Docker image
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./backend
          command: ls -la && npm install
      - persist_to_workspace:
          root: .
          paths:
            - backend/node_modules


  install-frontend-dependencies:
    docker:
      # Lightweight Docker image
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./frontend
          command: ls -la && npm install
      - persist_to_workspace:
          root: .
          paths:
            - frontend/node_modules



  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          working_directory: ./frontend
          command: |
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          working_directory: ./backend
          command: |
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end TEST
          command: |
            cd frontend
            sudo npm install npm@latest -g
            sudo npm i --save-dev standard-version
            sudo npm i semver
            npm run test
          
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end Test
          command: |
            cd backend
            sudo npm install npm@latest -g
            sudo npm i --save-dev standard-version
            sudo npm i semver
            npm run test

  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan Frontend
          command: |
            cd frontend
            sudo npm install
            sudo npm audit fix --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan Backend
          command: |
            cd backend
            sudo npm install
            sudo npm i --save-dev standard-version
            sudo npm i semver 
            sudo npm audit fix --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacity \
              --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
            
            URLS=$(aws ec2 describe-instances --region us-west-2 --query "Reservations[*].Instances[*].PublicIpAddress"   --output text)
            echo "URLS=$URLS"    
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udacity \
              --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            ip=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udacity" \
              --output text)
            echo "$ip" >> .circleci/ansible/inventory.txt
            cat ./.circleci/ansible/inventory.txt
            curl -H "Content-Type: text/plain" -H "token: IP-${CIRCLE_WORKFLOW_ID:0:9}" \
              --request PUT \
              --data "$ip" https://api.memstash.io/values/IP      - run:

      - persist_to_workspace:
          root: ~/
          paths:
            -  project/.circleci/ansible/inventory.txt

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - add_ssh_keys:
          fingerprints: ["2f:c0:d6:07:b0:c1:07:40:7a:26:aa:15:c6:4a:10:36"]
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Configure server
          command: |
            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml

  run-migrations:
    docker:
      # Docker image here- checkout: that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: awscli install
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -qq install awscli
            sudo apt-get -y -qq install python3
            pwd
            ls -la
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run build
            touch migration.txt
            npm run migrations >> migrations.txt
      - run:
          name: Send migration results to memstash
          working_directory: ./backend
          command: |
            if grep -q "has been executed successfully" migrations.txt;
            then
             curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" \
            --request PUT \
            --data "1" https://api.memstash.io/values/migration-${CIRCLE_WORKFLOW_ID}
            else
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" \
            --request PUT \
            --data "0" https://api.memstash.io/values/migration-${CIRCLE_WORKFLOW_ID}
            fi
      - run:
          name: LogOnFail
          when: on_fail
          command: |
            cat /home/circleci/.npm/_logs/*-debug.log
            cat backend/migration.txt
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  deploy-frontend:
      docker:
      - image: amazon/aws-cli      
      steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip 
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs 
      - run:
          name: Get backend url
          command: |
            # your code here
            BACKEND_IP=$(curl -H "token: IP-${CIRCLE_WORKFLOW_ID:0:9}" \
                        --request GET https://api.memstash.io/values/IP)
            export API_URL="http://${BACKEND_IP}:3030"
            echo API_URL="http://${BACKEND_IP}:3030" >> "frontend/.env"
            echo "${API_URL}"

      - run:
          name: Deploy frontend objects
          command: |
            npm install webpack-dev-server -g
            cd frontend
            npm install
            npm run build
            aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - add_ssh_keys:
          fingerprints: ["2f:c0:d6:07:b0:c1:07:40:7a:26:aa:15:c6:4a:10:36"]
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            ansible --version
            pip install awscli
            aws --version
      - run:
          name: Compress Backend
          command: |
            echo ENVIROMENT=development > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            tar -C backend -czvf artifact.tar.gz .
            ls -la
      - run:
          name: Deploy backend
          no_output_timeout: 30m
          command: |
            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml

  frontend smoke-test:
    docker:
       - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
              apk add --update tar gzip curl python3 py3-pip
              apk add --no-cache openssh-client
              pip3 install --upgrade pip
              pip3 install awscli
      - run:
          name: Frontend smoke test
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - revert-migrations
      - destroy-environment # Rollback on failure  
    
  backend smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip curl python3 py3-pip
            pip3 install --upgrade pip
            pip3 install awscli
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(curl -H "token: IP-${CIRCLE_WORKFLOW_ID:0:9}" \
                        --request GET https://api.memstash.io/values/IP)
            echo ${BACKEND_IP}
            curl "http://${BACKEND_IP}:3030/api/status"

  
  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    working_directory: .
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports \
            --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            
            export STACKS=$(aws cloudformation list-stacks \
            --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE \
            --no-paginate --output text)
            echo OldWorkflowID: "$OldWorkflowID"
            echo STACKS: "$STACKS" 
            aws cloudformation deploy \
            --template-file /root/project/.circleci/files/cloudfront.yml \
            --stack-name udapeople-cloudfront \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
            curl -H "Content-Type: text/plain" -H "token: OldWorkflowID-${CIRCLE_WORKFLOW_ID}" \
            --request PUT \
            --data "$OldWorkflowID" https://api.memstash.io/values/OldWorkflowID

      - revert-migrations
      - destroy-environment # Rollback on failure  

  cleanup:
    docker:
      # Docker image here
        - image: amazon/aws-cli
    working_directory: .
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
      - revert-migrations
      - destroy-environment # Rollback on failure  
        

workflows:
  default:
    jobs:
      #- build-frontend
      #- build-backend
      #- test-frontend:
      #    requires: [build-frontend]
      #- test-backend:
      #    requires: [build-backend]
      #- scan-backend:
      #    requires: [build-backend]
      #- scan-frontend:
      #    requires: [build-frontend]
      - deploy-infrastructure
      #    requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - frontend smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - backend smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [frontend smoke-test, backend smoke-test]
      - cleanup:
          requires: [cloudfront-update]